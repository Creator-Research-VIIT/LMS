// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  thumbnail   String
  price       Float
  teacherId   String
  createdAt   DateTime @default(now())

  teacher     User            @relation("CourseTeacher", fields: [teacherId], references: [id])
  contents    CourseContent[]
  enrollments Enrollment[]
  feedbacks   Feedback[]
  quizzes     Quiz[]
  progresses  Progress[]
}

enum ContentType {
  VIDEO
  NOTE
}

model CourseContent {
  id         String      @id @default(uuid())
  title      String
  type       ContentType
  url        String
  courseId   String
  orderIndex Int

  course Course @relation(fields: [courseId], references: [id])
}

model Enrollment {
  id         String   @id @default(uuid())
  studentId  String
  courseId   String
  enrolledAt DateTime @default(now())

  student User   @relation(fields: [studentId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])
}

enum QuizType {
  MID
  FINAL
}

model Quiz {
  id       String   @id @default(uuid())
  title    String
  type     QuizType
  courseId String

  course    Course         @relation(fields: [courseId], references: [id])
  questions QuizQuestion[]
  attempts  QuizAttempt[]
}

model QuizQuestion {
  id            String   @id @default(uuid())
  quizId        String
  questionText  String
  options       String[]
  correctAnswer String

  quiz Quiz @relation(fields: [quizId], references: [id])
}

model QuizAttempt {
  id          String   @id @default(uuid())
  studentId   String
  quizId      String
  score       Float
  answers     String[]
  submittedAt DateTime @default(now())

  student User @relation(fields: [studentId], references: [id])
  quiz    Quiz @relation(fields: [quizId], references: [id])
}

model Progress {
  id              String  @id @default(uuid())
  studentId       String
  courseId        String
  progressPercent Float
  completed       Boolean

  student User   @relation(fields: [studentId], references: [id])
  course  Course @relation(fields: [courseId], references: [id])
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

// Update User model with relations
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())

  courses      Course[]      @relation("CourseTeacher")
  feedbacks    Feedback[]
  enrollments  Enrollment[]
  quizAttempts QuizAttempt[]
  progresses   Progress[]
}

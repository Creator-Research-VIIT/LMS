generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String          @id @default(uuid())
  title       String
  description String
  thumbnail   String
  price       Float
  teacherId   String
  createdAt   DateTime        @default(now())
  approvalStatus String       @default("pending") // "pending", "approved", "rejected"// For admin approval
  teacher     User            @relation("CourseTeacher", fields: [teacherId], references: [id])
  contents    CourseContent[]
  enrollments Enrollment[]
  feedbacks   Feedback[]
  progresses  Progress[]
  quizzes     Quiz[]
}

model CourseContent {
  id         String      @id @default(uuid())
  title      String
  type       ContentType
  url        String
  courseId   String
  orderIndex Int
  course     Course      @relation(fields: [courseId], references: [id])
}

model Enrollment {
  id         String   @id @default(uuid())
  studentId  String
  courseId   String
  enrolledAt DateTime @default(now())
  course     Course   @relation(fields: [courseId], references: [id])
  student    User     @relation(fields: [studentId], references: [id])
}

model Quiz {
  id        String         @id @default(uuid())
  title     String
  type      QuizType
  courseId  String
  course    Course         @relation(fields: [courseId], references: [id])
  attempts  QuizAttempt[]
  questions QuizQuestion[]
}

model QuizQuestion {
  id            String   @id @default(uuid())
  quizId        String
  questionText  String
  options       String[]
  correctAnswer String
  quiz          Quiz     @relation(fields: [quizId], references: [id])
}

model QuizAttempt {
  id          String   @id @default(uuid())
  studentId   String
  quizId      String
  score       Float
  answers     String[]
  submittedAt DateTime @default(now())
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  student     User     @relation(fields: [studentId], references: [id])
}

model Progress {
  id              String  @id @default(uuid())
  studentId       String
  courseId        String
  progressPercent Float
  completed       Boolean
  course          Course  @relation(fields: [courseId], references: [id])
  student         User    @relation(fields: [studentId], references: [id])
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id            String        @id @default(uuid())
  name          String
  email         String        @unique
  password      String
  role          Role
  approvalStatus String       @default("pending") // "pending", "approved", "rejected"
  createdAt     DateTime      @default(now())
  emailVerified DateTime?
  referralCode  String?       @unique
  referredBy    String?
  courses       Course[]      @relation("CourseTeacher")
  enrollments   Enrollment[]
  feedbacks     Feedback[]
  progresses    Progress[]
  quizAttempts  QuizAttempt[]
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum ContentType {
  VIDEO
  NOTE
}

enum QuizType {
  MID
  FINAL
}
